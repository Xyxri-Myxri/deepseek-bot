import redis.asyncio as redis
import functools
from aiogram import types

from bot.config import RATE_LIMIT, REDIS_HOST, REDIS_PORT

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.Redis(host=REDIS_HOST, port=int(REDIS_PORT), decode_responses=True)


async def is_rate_limited(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"""
    key = f"rate_limit:{user_id}"
    count = await redis_client.get(key)

    if count is None:
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å, —Å–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å TTL 60 —Å–µ–∫—É–Ω–¥
        await redis_client.set(key, 1, ex=60)
        return False

    count = int(count)
    if count >= RATE_LIMIT:
        return True  # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    await redis_client.incr(key)
    return False


def limit_requests():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def decorator(func):
        @functools.wraps(func)
        async def wrapper(message: types.Message, *args, **kwargs):
            if await is_rate_limited(message.from_user.id):
                await message.answer(
                    "üö´ *–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.*",
                    parse_mode="Markdown",
                )
                return
            return await func(message, *args, **kwargs)

        return wrapper

    return decorator
