from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.db.database import get_user_history, save_user_query
from bot.keyboards.main import STYLE_KB, QUERY_KB, MAIN_MENU
from bot.keyboards.inline import get_history_keyboard, get_info_keyboard
from bot.services.deepseek import query_deepseek
from bot.utils.rate_limit import limit_requests

router = Router()

PRESET_OPTIONS = {
    "1Ô∏è‚É£ –û–±—ã—á–Ω—ã–π": "default",
    "2Ô∏è‚É£ –ù–∞—É—á–Ω—ã–π": "scientific",
    "3Ô∏è‚É£ –° —é–º–æ—Ä–æ–º": "humor",
    "4Ô∏è‚É£ –ü—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º": "simple",
    "5Ô∏è‚É£ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç": "detailed",
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
HISTORY_PER_PAGE = 3
MAX_MESSAGE_LENGTH = 4000


async def format_history_message(history: list, page: int) -> tuple[str, int]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_idx = (page - 1) * HISTORY_PER_PAGE
    end_idx = start_idx + HISTORY_PER_PAGE
    page_history = history[start_idx:end_idx]

    message_parts = []
    for item in page_history:
        query = (
            item["query"][:100] + "..." if len(item["query"]) > 100 else item["query"]
        )
        response = (
            item["response"][:200] + "..."
            if len(item["response"]) > 200
            else item["response"]
        )
        message_parts.append(f"üîπ –ó–∞–ø—Ä–æ—Å: {query}\nüìù –û—Ç–≤–µ—Ç: {response}\n")

    total_pages = (len(history) + HISTORY_PER_PAGE - 1) // HISTORY_PER_PAGE
    message = f"üìå –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n" + "\n".join(
        message_parts
    )

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
    if len(message) > MAX_MESSAGE_LENGTH:
        message = message[:MAX_MESSAGE_LENGTH] + "..."

    return message, total_pages


@router.message(Command("history"))
@router.message(lambda msg: msg.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
async def user_history(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = message.from_user.id
    history = await get_user_history(
        user_id, limit=100
    )  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    if not history:
        await message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", parse_mode="Markdown")
        return

    message_text, total_pages = await format_history_message(history, 1)
    keyboard = get_history_keyboard(1, total_pages)
    await message.answer(message_text, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("history_"))
async def process_history_pagination(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏"""
    page = int(callback_query.data.split("_")[1])
    user_id = callback_query.from_user.id
    history = await get_user_history(user_id, limit=100)

    message_text, total_pages = await format_history_message(history, page)
    keyboard = get_history_keyboard(page, total_pages)

    await callback_query.message.edit_text(
        message_text, parse_mode="Markdown", reply_markup=keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "close_history")
async def close_history(callback_query: types.CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤"""
    await callback_query.message.delete()
    await callback_query.answer()


@router.message(lambda msg: msg.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def show_info(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –∫–æ–º–∞–Ω–¥–∞—Ö"""
    info_text = """
ü§ñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç - –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å
‚Ä¢ /history –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤" - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ "üé® –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞" - –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞

*–°—Ç–∏–ª–∏ –æ—Ç–≤–µ—Ç–∞:*
1Ô∏è‚É£ –û–±—ã—á–Ω—ã–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
2Ô∏è‚É£ –ù–∞—É—á–Ω—ã–π - –æ—Ç–≤–µ—Ç —Å –Ω–∞—É—á–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è
3Ô∏è‚É£ –° —é–º–æ—Ä–æ–º - –æ—Ç–≤–µ—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —é–º–æ—Ä–∞
4Ô∏è‚É£ –ü—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
5Ô∏è‚É£ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç - –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç

*–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ Rate limiting: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: 4000 —Å–∏–º–≤–æ–ª–æ–≤
"""
    await message.answer(
        info_text, parse_mode="Markdown", reply_markup=get_info_keyboard()
    )


@router.callback_query(lambda c: c.data == "close_info")
async def close_info(callback_query: types.CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    await callback_query.message.delete()
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "show_history")
async def show_history_from_info(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é"""
    await callback_query.message.delete()
    await user_history(callback_query.message)
    await callback_query.answer()


@router.message(lambda msg: msg.text == "üé® –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞")
async def choose_style(message: types.Message):
    """–í—ã–±–æ—Ä —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:", reply_markup=STYLE_KB)


@router.message(lambda msg: msg.text in PRESET_OPTIONS)
async def set_preset(message: types.Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å"""
    user_id = message.from_user.id
    preset_name = PRESET_OPTIONS[message.text]
    current_preset = message.bot.user_data.get(user_id, "default")
    
    if current_preset == preset_name:
        await message.answer(
            f'‚ÑπÔ∏è –°—Ç–∏–ª—å "{message.text}" —É–∂–µ –≤—ã–±—Ä–∞–Ω!',
            reply_markup=QUERY_KB,
        )
        return
        
    message.bot.user_data[user_id] = preset_name  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∏–ª—å
    await message.answer(
        f'‚úÖ –°—Ç–∏–ª—å "{message.text}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å',
        reply_markup=QUERY_KB,
    )


@router.message(lambda msg: msg.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥")
async def cancel_query(message: types.Message):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if message.from_user.id in message.bot.user_data:
        del message.bot.user_data[message.from_user.id]
    await message.answer("‚ùå –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=MAIN_MENU)


@router.message(lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if message.from_user.id in message.bot.user_data:
        del message.bot.user_data[message.from_user.id]
    await message.answer("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MAIN_MENU)


@router.message(~F.text.startswith("/"))  # –ù–µ –ª–æ–≤–∏–º –∫–æ–º–∞–Ω–¥—ã
@limit_requests()
async def handle_query(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π '–û–±—Ä–∞–±–æ—Ç–∫–∞...' –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    user_id = message.from_user.id
    preset_name = message.bot.user_data.get(user_id, "default")  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å
    query_text = message.text.strip()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response_msg = await message.answer(
        "‚è≥ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...*", parse_mode="Markdown"
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = await query_deepseek(message.text, preset_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_user_query(user_id, query_text, response)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
    await response_msg.edit_text(response, parse_mode="Markdown")

    # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
    if user_id in message.bot.user_data:
        del message.bot.user_data[user_id]
